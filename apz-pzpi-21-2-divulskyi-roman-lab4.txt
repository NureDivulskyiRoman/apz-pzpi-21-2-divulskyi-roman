     МЕТА
     
     
     Мета лабораторної роботи полягає у розробці frontend частини програмної системи для керування приладами зрошення у сільському господарстві. В рамках цієї лабораторної роботи буде ознайомлення з основними засобами та інструментами веб-розробки, використовуючи сучасні технології та практики. Зокрема, буде розроблений інтерфейс користувача (UI) для системи управління приладами зрошення, забезпечуючи зручний та ефективний спосіб взаємодії з програмним забезпеченням для агрономічних потреб. В результаті лабораторної роботи будть отрмані практичні навички розробки веб-інтерфейсів, які можна використовувати в реальних проектах для підвищення продуктивності та ефективності управління приладами зрошення в сільському господарстві.
     
     
     ЗАВДАННЯ
     
     
     Завдання лабораторної роботи полягатиме у розробці інтерфейсу для адміністрування програмної системи для керування приладами зрошення у сільському господарстві. Учасники лабораторної роботи будуть залучені до створення зручного та ефективного інтерфейсу, який дозволить адміністраторам здійснювати керування приладами зрошення, встановлювати режими роботи, моніторити стан обладнання та виконувати інші адміністративні завдання.
     В процесі розробки будуть використані сучасні технології та інструменти, зокрема: React.js [4], Typescript [2], HTML та CSS, бібліотеки та компоненти для дизайну.


2 РОЗРОБКА КЛІЄНТСЬКОЇ ЧАСТИНИ
2.1 Архітектура системи
     
     
     Архітектура програмної системи для керування приладами зрошення у сільському господарстві є визначальним аспектом, що визначає загальну структуру, організацію та взаємодію її компонентів. На високому рівні, система має бути розроблена таким чином, щоб забезпечити ефективну та надійну роботу приладів зрошення, оптимізацію використання ресурсів та забезпечення комфортного користування для кінцевих користувачів.
     Наступна use case діаграма моделює функціональність програмної системи для керування приладами зрошення в сільському господарстві. Ця діаграма відображає взаємодію акторів (користувачів) з системою та функції, які вони можуть виконувати. (див. рис. 2.1).
     

Рисунок 2.1 – Use case діаграма
     Перед подальшим розглядом діаграми сутність-зв'язок (ER) важливо зазначити, що ця діаграма моделює структуру бази даних програмної системи для керування приладами зрошення у сільському господарстві. ER-діаграма відображає сутності (таблиці) бази даних та їх зв'язки, що допомагає зрозуміти логічну організацію даних та взаємозв'язки між ними. Розглядаючи ER-діаграму (див. рис. 2.2), можна отримати уявлення про структуру даних, їх зв'язки та ключові поля, що допоможе при подальшій розробці та оптимізації бази даних.
     

Рисунок 2.2 - ER-діаграма для предметної області
     
     Після детального розгляду ER-діаграми стає очевидним, що вона відображає складну структуру бази даних програмної системи для керування приладами зрошення у сільському господарстві. Діаграма включає в себе низку сутностей (таблиць) та зв'язки між ними, які визначають способи, якими дані організовані та взаємодіють один з одним.
     Кожна сутність на діаграмі представляє конкретну категорію даних, таку як "Прилад зрошення", "Датчик", "Розклад зрошення" тощо. Зв'язки між сутностями визначають, які дані пов'язані між собою та як вони взаємодіють. Наприклад, зв'язок "один до багатьох" між сутностями "Прилад зрошення" та "Датчик" показує, що кожен прилад зрошення може мати декілька датчиків.
     Аналізуючи ER-діаграму, можна зрозуміти логічну організацію даних у базі даних та визначити ключові взаємозв'язки, які необхідно врахувати при подальшій розробці та оптимізації системи управління приладами зрошення.
     Перед подальшим дослідженням діаграми компонентів важливо визначити, що ця діаграма відображає структуру програмної системи для керування приладами зрошення в сільському господарстві на рівні компонентів. Діаграма компонентів (див. рис. 2.3) вказує на різноманітні компоненти системи та їх взаємозв'язки. Це важливий інструмент для визначення архітектури системи, розподілу відповідальності між компонентами та організації роботи програмної системи в цілому.
     

Рисунок 2.3 – Діаграма компонентів
     Аналізуючи діаграму компонентів, можна отримати уявлення про структуру програмної системи, розділення її на логічні компоненти та взаємодію між ними. Це допомагає при подальшій розробці, тестуванні та підтримці системи, а також сприяє зрозумінню загальної архітектури проекту.
     Діаграма пакетів, наведена на рисунку 2.4, відображає структуру програмної системи для керування приладами зрошення у сільському господарстві на рівні пакетів. Ця діаграма розкриває організацію системи на рівні компонентів та груп функцій.
     

Рисунок 2.4 – Діаграма пакетів
     
     Аналізуючи діаграму, можна виявити основні пакети програмної системи та їх взаємозв'язки. Кожен пакет відповідає за певний аспект функціональності системи та містить в собі пов'язані компоненти.
     Діаграма діяльності, яка представлена на рисунку 2.5, ілюструє послідовність дій та взаємодію об'єктів в рамках певного процесу або сценарію в програмній системі для керування приладами зрошення в сільському господарстві. Ця діаграма використовується для моделювання бізнес-процесів та алгоритмів, які описують, як система повинна працювати у певних ситуаціях.
     

Рисунок 2.5 – Діаграма діяльності
     
     Аналізуючи діаграму діяльності, можна зрозуміти порядок виконання конкретного процесу або функціональності, а також взаємодію між різними об'єктами та системними компонентами. Діаграма діяльності допомагає визначити послідовність операцій та умов переходу між ними, що спрощує розуміння логіки системи та виявлення можливих проблем або неоднозначностей у функціональності.
     
2.2 Опис інтерфейсу
     
     
     Система для керування приладами зрошення у сільському господарстві надає користувачам доступ до різноманітних сторінок, які дозволяють управляти та моніторити функціонування різних аспектів системи. Нижче наведено опис кожної сторінки інтерфейсу:
     – сторінка фермерських ділянок. На цій сторінці користувач може переглянути список фермерських ділянок, їх розміри та поточний стан. Користувач може додавати нові ділянки, видаляти чи редагувати інформацію про існуючі ділянки;
     – сторінка пристроїв зрошення. На цій сторінці користувач може переглянути список пристроїв зрошення, їх стан та параметри. Користувач може додавати нові пристрої, видаляти чи редагувати інформацію про існуючі пристрої;
     – сторінка розкладів зрошення. На цій сторінці користувач може переглянути список розкладів зрошення для кожної фермерської ділянки. Користувач може створювати нові розклади, редагувати або видаляти існуючі;
     – сторінка сенсорів. На цій сторінці користувач може переглянути список сенсорів, їхнє розташування та поточні показники. Користувач може додавати нові сенсори, видаляти чи редагувати інформацію про існуючі сенсори;
     – сторінка ресурсів води. На цій сторінці користувач може переглянути інформацію про доступні ресурси води, їх обсяги та статус. Користувач може оновлювати дані про ресурси води або додавати нові дані;
     – сторінка інформації про погодні умови. На цій сторінці користувач може переглядати графіки погодних умов за всі періоди. Графік показує температуру, кількість опадів та вологість повітря за кожен день. Користувач може змінювати період аналізу та налаштовувати відображення параметрів на графіку.
2.3 Використані технології
     
     
     При розробці клієнтської частини програмної системи для керування приладами зрошення у сільському господарстві були використані сучасні технології та інструменти, що дозволили створити зручний та ефективний інтерфейс для користувачів. Нижче наведено список використаних технологій:
     – React.js [4]: Основним фреймворком для розробки користувацького інтерфейсу був обраний React.js. Він забезпечує ефективну та динамічну роботу веб-додатків, дозволяючи легко організувати компоненти та взаємодію між ними;
     – TypeScript (TS) [2]: Для покращення робочого процесу та забезпечення більшої безпеки в процесі розробки був використаний TypeScript. TypeScript дозволяє створювати строго типізований код, що полегшує виявлення помилок та підвищує читабельність коду;
     – MobX: Для управління станом додатку та забезпечення реактивності був обраний MobX. MobX дозволяє зручно організувати стан додатку та автоматизувати оновлення інтерфейсу при зміні даних;
     – React Router: Для реалізації навігації між сторінками та роутингу був використаний React Router. Він надає зручний інтерфейс для створення маршрутів та переходів між різними частинами додатку;
     – для виконання HTTP-запитів до сервера була використана бібліотека Axios. Вона забезпечує простий та зручний інтерфейс для взаємодії з API серверної частини;
     – для відображення графіків погодних умов було використано бібліотеку Chart.js [1]. Вона надає різноманітні можливості для створення інтерактивних та красиво виглядаючих графіків.
     Ці технології були обрані з урахуванням їхньої ефективності, розширюваності та популярності в розробці сучасних веб-додатків. Вони допомогли створити зручний та функціональний інтерфейс, який відповідає потребам користувачів.
     Тепер розглянемо як створюється графік. У фрагменті коду (див. додаток А.1) ми маємо компонент React [4], що відповідає за відображення графіків погодних умов. Цей компонент використовується для відображення температури, опадів та вологості повітря за певний період часу.
     Компонент використовує React Hooks, такі як useState, useEffect та useMemo для управління станом та оптимізації виконання. Він також використовує бібліотеку Axios [3] для виконання асинхронного запиту до сервера для отримання даних про погоду. Отримані дані сортуються за датою, а потім форматуються у формат, придатний для побудови графіка.
     Графік будується за допомогою бібліотеки Chart.js [1], яка малює графіки на HTML Canvas. За допомогою useRef зберігається посилання на графік, щоб уникнути збору сміття при оновленні компонента. Функція canvasCallback викликається після монтування компонента та малює графік на HTML Canvas за допомогою бібліотеки Chart.js [1].
     Такий підхід дозволяє створювати динамічні графіки погодних умов та оновлювати їх при зміні даних без перезавантаження сторінки.


ВИСНОВКИ
     
     
     В результаті роботи була успішно розроблена програмна система для керування приладами зрошення у сільському господарстві. Ця система надає користувачам зручний та ефективний інтерфейс для моніторингу та управління функціонуванням різних аспектів системи.
     У процесі розробки використовувалися сучасні технології та інструменти, такі як, React.js, TypeScript для забезпечення типізації коду, та інші. Використання таких технологій дозволило забезпечити швидку розробку та високу продуктивність системи.
     Крім того, реалізація динамічних графіків погодних умов за допомогою бібліотеки Chart.js дозволяє користувачам отримувати актуальну інформацію про погодні умови та приймати обгрунтовані рішення щодо управління приладами зрошення.
     У цілому, програмна система є ефективним інструментом для оптимізації процесів у сільському господарстві, дозволяючи фермерам ефективно керувати зрошенням та підтримувати оптимальні умови для вирощування рослин.
     


ДОДАТОК А
Функції клієнтської частини
     
     
А.1 Функція створення графіку
     
      1 export const Charts = () => {
      2 const [weatherConditions, setWeatherConditions] = useState<IWeatherCondition[]>([]); 
      3 const fetchWeatherConditions = async () => {
      4 await getWeatherConditions().then((data) => setWeatherConditions(data));
      5 } 
      6 useEffect(() => {
      7 fetchWeatherConditions();
      8 }, [])
      9 const sortWeatherConditions = (items: IWeatherCondition[]): IWeatherCondition[] => {
      10 return items.sort((a, b) => {
      11 const dateA = new Date(a.dateTime);
      12 const dateB = new Date(b.dateTime);
      13 return dateA.getTime() - dateB.getTime();
      14 });
      15 }
      16 const chartData = useMemo<ChartData>(() => {
      17 const sortedItems = sortWeatherConditions(weatherConditions);
      18 const formatData = (): ChartData => ({
      19 labels: sortedItems.map(({dateTime}) => dateTime),
      20 datasets: [{
      21 label: 'Temperature',
      22 data: sortedItems.map(({ temperature }) => temperature)
      23 },
      24 {
      25 label: 'Rainfall',
      26 data: sortedItems.map(({ rainfall }) => rainfall)
      27 },
      28 {
      29 label: 'Humidity',
      30 data: sortedItems.map(({ humidity }) => humidity)
      31 }
      32 ]
      33 });
      34 return formatData();
      35 }, [weatherConditions])
      36 const chartRef = useRef<Chart | null>(null);
      37 const canvasCallback = (canvas: HTMLCanvasElement | null) => {
      38 if (!canvas) return;
      39 const ctx = canvas.getContext("2d");
      40 if (ctx && weatherConditions) {
      41 if (chartRef.current) {
      42 chartRef.current.destroy();
      43 }
      44 chartRef.current = new Chart(ctx, {
      45 type: 'line',
      46 data: chartData,
      47 });
      48 }
      49 };
      50 return (
      51 <div>
      52 <canvas ref={canvasCallback}></canvas>
      53 </div>
      54 )}





