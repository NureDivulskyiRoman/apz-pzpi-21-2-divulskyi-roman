1 ХІД РОБОТИ
1.1 Концептуальне моделювання предметної області
     
     
     У цьому розділі зосередимось на концептуальному моделюванні предметної області — сільського господарства та системи керування приладами зрошення. Концептуальне моделювання є ключовим етапом у проектуванні програмної системи, оскільки воно дозволяє нам зрозуміти структуру та взаємозв'язки між різними сутностями в цій області.
     Під час концептуального моделювання проводиться аналіз потреб сільського господарства та визначається основні аспекти, які повинна враховувати система керування зрошенням. Вивчаються різноманітні типи приладів зрошення, їх параметри та функціональні можливості, а також потреби рослин у воді в залежності від різних умов.
     На основі цього аналізу створено концептуальну модель, яка відображає ключові сутності та їх взаємозв'язки. Ця модель допомагає чітко уявити, як буде функціонувати система та які дані потрібно буде зберігати та обробляти.
     Такий підхід дозволяє забезпечити, що програмна система буде максимально адаптована до потреб користувачів і відповідатиме основним вимогам сільського господарства. Концептуальне моделювання є важливим етапом у розробці будь-якої програмної системи, особливо якщо йдеться про область, де важлива оптимізація та ефективне використання ресурсів, як у випадку з сільським господарством.
     Уявімо ідеальну ситуацію, коли сільське господарство може впроваджувати передові технології для керування приладами зрошення. Для цього ми розробляємо програмну систему, яка дозволить автоматизувати та оптимізувати процес зрошення на полях. Наша система спрямована на поліпшення управління водними ресурсами, забезпечення оптимальних умов для росту рослин та підвищення врожайності. Перед вами Use Case діаграма (див. рис. 1.1), що відображає основні функціональні можливості програмної системи.
     

Рисунок 1.1 – Use case діаграма
     
     Після аналізу Use Case діаграми стає очевидним, які основні функціональні можливості надає наша програмна система для керування приладами зрошення. З цими знаннями можна продовжити розробку, фокусуючись на реалізації цих функцій та забезпеченні оптимального користувацького досвіду. Кожен випадок використання відображає конкретні сценарії взаємодії з системою, що дозволяє нам зрозуміти, як користувачі будуть взаємодіяти з нашим продуктом у реальних умовах. Все це допомагає створити максимально ефективну та користувацько-орієнтовану програмну систему для підтримки сільського господарства.
     
     
1.2 Опис побудови бази даних
     
     
     У даному розділі буде розглянуто процес побудови бази даних для програмної системи керування приладами зрошення у сільському господарстві. Правильна структура бази даних є важливою складовою успішного функціонування системи, оскільки вона забезпечує ефективне зберігання та організацію даних, необхідних для роботи програми.
     Спочатку буде проведено аналіз вимог до бази даних, визначена, яка інформація потрібна для ефективного керування приладами зрошення. Це може включати в себе дані про самі прилади, їх параметри, графіки зрошення, історію використання та багато іншого.
     Після цього розрорбляється схема бази даних, визначаючи таблиці, їх поля та взаємозв'язки. Для цього була створена ER-діаграма, що показана на рисунку 1.2.
     

Рисунок 1.2 – ER-діаграма
     Зважаючи на тему "Програмна система для керування приладами зрошення у сільському господарстві", наведено перелік атрибутів для сутностей:
     – фермерська ділянка: id (первинний ключ), назва, площа, локація;
     – пристрій зрошення: id (первинний ключ), назва, тип, витрати води, статус, фермерська ділянка;
     – розклад зрошення: id (первинний ключ), дата початку, дата кінця, затримка, пристрій зрошення;
     – сенсор: id (первинний ключ), назва, тип, локація, фермерська ділянка;
     – ресурс води: id (первинний ключ), назва, місткість, поточний рівень, локація, фермерська ділянка;
     – інформація про погодні умови: id (первинний ключ), дата та час, температура, вологість, опади, локація.
     У базі даних для програмної системи керування приладами зрошення у сільському господарстві, існують різноманітні зв'язки між сутностями. Зв'язки:
     – пристрій зрошення та фермерська ділянка має зв’язок один до багатьох, тобто ділянка може мати багато пристроїв;
     – розклад зрошення та фермерська ділянка має зв’язок один до багатьох, тобто ділянка може мати у собі багато розкладів;
     – сенсор та фермерська ділянка має зв’язок багато до багатьох, тобто ділянка має багато сенсорів;
     – ресурси води та фермерська ділянка має зв’язок багато до багатьох, тобто ділянка має багато кількості ресурсів води.
     
     
1.3 Серверна частина
     
     
     Серверна частина програмної системи для керування приладами зрошення у сільському господарстві є центральним елементом, що забезпечує обробку та аналіз даних, а також управління пристроями зрошення на великих територіях. При розробці серверної частини були використані сучасні технології та інструменти з метою забезпечення надійності, масштабованості та ефективності системи.
     Для реалізації серверної частини використовувалися такі технології:
     – мова програмування C# [3]. Весь серверний код був написаний мовою програмування C#, що забезпечило високу швидкість розробки та ефективність виконання;
     – ASP.NET Core [4]. Для створення веб-сервера та обробки HTTP-запитів був використаний ASP.NET Core, що надає масштабовану та високопродуктивну інфраструктуру для розробки веб-застосунків;
     – Entity Framework Core [2] з підтримкою MS SQL Server. Для роботи з базою даних використовувався Entity Framework Core, який забезпечує високорівневий доступ до даних та автоматизоване ведення міграцій. В якості бази даних використовувалась MS SQL Server для надійного зберігання та управління даними;
     – JSON [1]. Для обміну даними між клієнтами та сервером використовувався формат даних JSON (JavaScript Object Notation), який є легким та зручним для використання.
     Використання цих технологій дозволило створити потужну та надійну серверну частину системи, яка забезпечує ефективне управління приладами зрошення та аналіз даних у сільському господарстві.
     Нижче наведена діаграма пакетів (див. рис. 1.3), що ілюструє структуру серверної частини програмної системи для керування приладами зрошення:
     
     

Рисунок 1.3 – Діаграма пакетів
     
     Діаграма пакетів, яка наведена вище, ілюструє структуру серверної частини програмної системи для керування приладами зрошення. Її аналіз дозволить краще зрозуміти внутрішній механізм системи та її компоненти.
     Процес розгортання програмної системи - це важлива частина життєвого циклу розробки програмного забезпечення. Він включає в себе розміщення та налаштування компонентів системи на конкретних серверах або хмарних сервісах. Діаграма розгортання надає візуальне представлення архітектури розгортання системи, визначає роль та місце кожного компонента в інфраструктурі, а також відображає зв'язки між ними.
     Нижче наведена діаграма розгортання (див. рис. 1.4), яка ілюструє структуру та взаємодію компонентів програмної системи для керування приладами зрошення. Ця діаграма дозволяє краще зрозуміти топологію розгортання системи, розподіл компонентів на різних серверах або сервісах, а також зв'язки між ними. Аналізуючи цю діаграму, можна визначити, як кожен компонент взаємодіє з іншими, а також впливати на ефективність, масштабованість та надійність розгортання програмної системи.
     

Рисунок 1.4 – Діаграма розгортання
     
     
     Клас DataBaseContext (див. додаток А.1) є ключовим компонентом програми, відповідальним за взаємодію з базою даних. Ось розгорнута розшифровка його функцій та методів:
     – конструктор класу. У конструкторі викликається метод EnsureCreated() для перевірки наявності бази даних та її створення, якщо вона відсутня. Це забезпечує автоматичне створення бази даних при першому запуску програми;
     – властивості DbSet. Для кожного об'єкту, який зберігається в базі даних, визначена відповідна властивість DbSet. Наприклад, властивість FarmPlots вказує на колекцію об'єктів типу FarmPlot, які зберігаються в таблиці бази даних;
     – метод OnConfiguring. Цей метод викликається під час конфігурації контексту бази даних. У ньому встановлюється підключення до бази даних SQL Server за допомогою методу UseSqlServer(). В параметрах передаються налаштування сервера та бази даних;
     – метод OnModelCreating. Цей метод викликається під час визначення моделі даних. У даний момент метод не містить власного коду, проте його можна використати для визначення конфігурації моделі даних, такої як встановлення первинних ключів чи зовнішніх ключів.
     Цей клас демонструє використання паттерну проектування "Unit of Work" разом з "Repository Pattern", що дозволяє забезпечити доступ до даних через абстракцію, яка полегшує тестування та збереження коду.
     

1.4 REST специфікація
     
     
     Фермерські ділянки:
     – GET /api/FarmPlots - Отримати список ділянок;
     – POST /api/FarmPlots - Створити нову ділянку;
     – GET /api/FarmPlots/{id} - Отримати конкретну ділянку за її ідентифікатором;
     – PUT /api/FarmPlots/{id} - Оновити інформацію про землепарцель за її ідентифікатором;
     – DELETE /api/FarmPlots/{id} - Видалити ділянку за її ідентифікатором.
     Прилади зрошення:
     – GET /api/IrrigationDevices - Отримати список приладів зрошення;
     – POST /api/IrrigationDevices - Створити новий прилад зрошення;
     – GET /api/IrrigationDevices/{id} - Отримати конкретний прилад зрошення за його ідентифікатором;
     – PUT /api/IrrigationDevices/{id} - Оновити інформацію про прилад зрошення за його ідентифікатором;
     – DELETE /api/IrrigationDevices/{id} - Видалити прилад зрошення за його ідентифікатором.
     Розклад зрошення:
     – GET /api/IrrigationSchedules - Отримати список графіків зрошення;
     – POST /api/IrrigationSchedules - Створити новий графік зрошення;
     – GET /api/IrrigationSchedules/{id} - Отримати конкретний графік зрошення за його ідентифікатором;
     – PUT /api/IrrigationSchedules/{id} - Оновити інформацію про графік зрошення за його ідентифікатором;
     – DELETE /api/IrrigationSchedules/{id} - Видалити графік зрошення за його ідентифікатором.
     Сенсори:
     – GET /api/Sensors - Отримати список датчиків;
     – POST /api/Sensors - Створити новий датчик;
     – GET /api/Sensors/{id} - Отримати конкретний датчик за його ідентифікатором;
     – PUT /api/Sensors/{id} - Оновити інформацію про датчик за його ідентифікатором;
     – DELETE /api/Sensors/{id} - Видалити датчик за його ідентифікатором.
     Водні ресурси:
     – GET /api/WaterResources - Отримати список водних ресурсів;
     – POST /api/WaterResources - Створити новий водний ресурс;
     – GET /api/WaterResources/{id} - Отримати конкретний водний ресурс за його ідентифікатором;
     – PUT /api/WaterResources/{id} - Оновити інформацію про водний ресурс за його ідентифікатором;
     – DELETE /api/WaterResources/{id} - Видалити водний ресурс за його ідентифікатором.
     Умови погоди:
     – GET /api/WeatherConditions - Отримати список умов погоди;
     – POST /api/WeatherConditions - Створити нові умови погоди;
     – GET /api/WeatherConditions/{id} - Отримати конкретні умови погоди за їх ідентифікатором;
     – PUT /api/WeatherConditions/{id} - Оновити інформацію про умови погоди за їх ідентифікатором;
     – DELETE /api/WeatherConditions/{id} - Видалити умови погоди за їх ідентифікатором.
     